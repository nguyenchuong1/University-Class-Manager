import tkinter as tk
import sqlite3


class Chat_Bot:
    def __init__(self, root):
        self.root = root
        self.root.title("ChatBot Qu·∫£n L√Ω H·ªçc Sinh")

        # T·∫°o c∆° s·ªü d·ªØ li·ªáu n·∫øu ch∆∞a t·ªìn t·∫°i
        self.connect_db()

        # Giao di·ªán ChatBot
        self.chat_log = tk.Text(self.root, bg="white", font=("Arial", 12), state=tk.DISABLED, width=50, height=20)
        self.chat_log.pack(padx=10, pady=10)

        self.chat_log.tag_configure("user", justify="right")
        self.chat_log.tag_configure("bot", justify="left")

        intro_message = (
            "Xin ch√†o! T√¥i l√† ChatBot Qu·∫£n L√Ω H·ªçc Sinh.\n"
            "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n th·ª±c hi·ªán c√°c c√¥ng vi·ªác nhanh ch√≥ng:\n\n"
            "üëâ V√≠ d·ª•: 'id 101', 'l·ªõp 10A1'.\n"
        )
        self.chat_log.config(state=tk.NORMAL)
        self.chat_log.insert(tk.END, f"Bot: {intro_message}\n", "bot")
        self.chat_log.config(state=tk.DISABLED)
        self.chat_log.yview(tk.END)

        self.entry = tk.Entry(self.root, font=("Arial", 12), width=40)
        self.entry.pack(side=tk.LEFT, padx=(10, 0), pady=10)

        send_button = tk.Button(self.root, text="G·ª≠i", font=("Arial", 12), bg="blue", fg="white", command=self.send_message)
        send_button.pack(side=tk.RIGHT, padx=(0, 10), pady=10)

    def connect_db(self):
        conn = sqlite3.connect(r'test_du_lieu_chay_thu.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS StudentDB (
                MSSV VARCHAR(20) PRIMARY KEY,
                Ho_Ten VARCHAR(50),
                Gender TEXT,
                Birth_Date DATE
            )
        ''')

        conn.commit()
        conn.close()

    def send_message(self):
        user_message = self.entry.get().strip()
        if user_message:
            self.chat_log.config(state=tk.NORMAL)
            self.chat_log.insert(tk.END, f"B·∫°n: {user_message}\n", "user")
            self.entry.delete(0, tk.END)

            bot_response = self.handle_query(user_message)
            self.chat_log.insert(tk.END, f"Bot: {bot_response}\n", "bot")

        self.chat_log.config(state=tk.DISABLED)
        self.chat_log.yview(tk.END)

    def handle_query(self, query):
        if "id" in query.lower() and "l·ªõp" in query.lower():
            # Tr∆∞·ªùng h·ª£p nh·∫≠p c·∫£ ID v√† l·ªõp
            student_id = self.extract_id(query)
            class_name = self.extract_class(query)
            if student_id and class_name:
                return self.get_student_by_id_and_class(student_id, class_name)
            else:
                return "Vui l√≤ng cung c·∫•p c·∫£ ID v√† l·ªõp h·ª£p l·ªá. V√≠ d·ª•: 'id 101 l·ªõp 10A1'."
        elif "l·ªõp" in query.lower() and "v·∫Øng bao nhi√™u" in query.lower():
            class_name = self.extract_class(query)
            if class_name:
                return self.get_absence_statistics_by_class(class_name)
            else:
                return "Vui l√≤ng cung c·∫•p l·ªõp h·ª£p l·ªá. V√≠ d·ª•: 'l·ªõp 10A1 v·∫Øng'."
        elif "id" in query.lower():
            student_id = self.extract_id(query)
            if student_id:
                return self.get_student_by_id(student_id)
            else:
                return "Vui l√≤ng cung c·∫•p ID h·ª£p l·ªá. V√≠ d·ª•: 'id 101'."
        elif "l·ªõp" in query.lower():
            class_name = self.extract_class(query)
            if class_name:
                return self.get_students_by_class(class_name)
            else:
                return "Vui l√≤ng cung c·∫•p l·ªõp h·ª£p l·ªá. V√≠ d·ª•: 'l·ªõp 10A1'."
        elif "Hi" or "hi" or "Xin ch√†o" in query.lower():
            return "Xin ch√†o! T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n ƒëi·ªÅu g√¨ h√¥m nay?"
        else:
            return "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ ID ho·∫∑c l·ªõp h·ªçc sinh."

    def get_student_by_id(self, student_id):
        conn = sqlite3.connect(r'test_du_lieu_chay_thu.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT StudentDB.MSSV, StudentDB.Ho_Ten, StudentDB.Gender, StudentDB.Birth_Date, Lop.Ten_Lop
            FROM StudentDB
            JOIN LopSinhVien ON StudentDB.MSSV = LopSinhVien.MSSV
            JOIN Lop ON LopSinhVien.Ma_Lop = Lop.Ma_Lop
            WHERE StudentDB.MSSV = ?
        ''', (student_id,))
        student = cursor.fetchone()
        conn.close()

        if student:
            return (
                f"Th√¥ng tin h·ªçc sinh:ID: {student[0]},T√™n: {student[1]},Gi·ªõi t√≠nh: {student[2]},Ng√†y sinh: {student[3]},L·ªõp: {student[4]}\n"
            )
        else:
            return "Kh√¥ng t√¨m th·∫•y h·ªçc sinh v·ªõi ID ƒë√£ nh·∫≠p."

    def get_students_by_class(self, class_name):
        conn = sqlite3.connect(r'test_du_lieu_chay_thu.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT StudentDB.MSSV, StudentDB.Ho_Ten
            FROM StudentDB
            JOIN LopSinhVien ON StudentDB.MSSV = LopSinhVien.MSSV
            JOIN Lop ON LopSinhVien.Ma_Lop = Lop.Ma_Lop
            WHERE Lop.Ten_Lop = ?
        ''', (class_name,))
        students = cursor.fetchall()
        conn.close()

        if students:
            response = f"Danh s√°ch h·ªçc sinh l·ªõp {class_name}:\n"
            for student in students:
                response += f"- ID: {student[0]}, T√™n: {student[1]}\n"
            return response
        else:
            return f"Kh√¥ng t√¨m th·∫•y h·ªçc sinh n√†o trong l·ªõp {class_name}."

    def get_student_by_id_and_class(self, student_id, class_name):
        conn = sqlite3.connect(r'test_du_lieu_chay_thu.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT StudentDB.MSSV, StudentDB.Ho_Ten, StudentDB.Gender, StudentDB.Birth_Date, Lop.Ten_Lop
            FROM StudentDB
            JOIN LopSinhVien ON StudentDB.MSSV = LopSinhVien.MSSV
            JOIN Lop ON LopSinhVien.Ma_Lop = Lop.Ma_Lop
            WHERE StudentDB.MSSV = ? AND Lop.Ten_Lop = ?
        ''', (student_id, class_name))
        student = cursor.fetchone()
        conn.close()

        if student:
            return (
                f"Th√¥ng tin h·ªçc sinh:\n"
                f"- ID: {student[0]}\n"
                f"- T√™n: {student[1]}\n"
                f"- Gi·ªõi t√≠nh: {student[2]}\n"
                f"- Ng√†y sinh: {student[3]}\n"
                f"- L·ªõp: {student[4]}\n"
            )
        else:
            return f"Kh√¥ng t√¨m th·∫•y h·ªçc sinh v·ªõi ID '{student_id}' trong l·ªõp '{class_name}'."

    def get_absence_statistics_by_class(self, class_name):
        conn = sqlite3.connect(r'test_du_lieu_chay_thu.db')
        cursor = conn.cursor()

        # L·∫•y t·ªïng s·ªë h·ªçc sinh trong l·ªõp
        cursor.execute('''
            SELECT COUNT(*)
            FROM StudentDB
            JOIN LopSinhVien ON StudentDB.MSSV = LopSinhVien.MSSV
            JOIN Lop ON LopSinhVien.Ma_Lop = Lop.Ma_Lop
            WHERE Lop.Ten_Lop = ?
        ''', (class_name,))
        total_students = cursor.fetchone()[0]

        if total_students == 0:
            conn.close()
            return f"Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªõp {class_name}."

        # L·∫•y s·ªë l∆∞·ª£ng h·ªçc sinh v·∫Øng m·∫∑t
        cursor.execute('''
            SELECT COUNT(*)
            FROM Tong_Cong,Lop
            WHERE Tong_Cong.Ma_Lop = Lop.Ma_Lop AND Lop.Ten_Lop = ? AND Tong_Cong.Vang_Phan_Tram > 0
        ''', (class_name,))
        absent_students = cursor.fetchone()[0]
        conn.close()

        # T√≠nh t·ª∑ l·ªá v·∫Øng m·∫∑t
        absence_percentage = (absent_students / total_students) * 100

        return (
            f"L·ªõp {class_name} c√≥ {absent_students}/{total_students} h·ªçc sinh v·∫Øng m·∫∑t.\n"
            f"T·ª∑ l·ªá v·∫Øng m·∫∑t: {absence_percentage:.2f}%."
        )
    def extract_id(self, query):
        words = query.split()
        for word in words:
            if word.isdigit():
                return word
        return None

    def extract_class(self, query):
        words = query.split()
        for i, word in enumerate(words):
            if word.lower() == "l·ªõp" and i + 1 < len(words):
                return words[i + 1]
        return None


# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    root = tk.Tk()
    obj = Chat_Bot(root)
    root.mainloop()
